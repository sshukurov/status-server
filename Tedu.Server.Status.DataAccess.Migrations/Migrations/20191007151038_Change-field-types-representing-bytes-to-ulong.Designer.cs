// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tedu.Server.Status.DataAccess;

namespace Tedu.Server.Status.DataAccess.Migrations.Migrations
{
    [DbContext(typeof(TeduStatusDbContext))]
    [Migration("20191007151038_Change-field-types-representing-bytes-to-ulong")]
    partial class Changefieldtypesrepresentingbytestoulong
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Tedu.Server.Status.DataAccess.Entities.Backup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("BackupDurationCopySeconds")
                        .HasColumnName("backupdurationcopyseconds");

                    b.Property<int>("BackupDurationTotalSeconds")
                        .HasColumnName("backupdurationtotalseconds");

                    b.Property<int>("BackupsAmount")
                        .HasColumnName("backupsamount");

                    b.Property<DateTime>("CreatedDateTimeUtc")
                        .HasColumnName("createddatetimeutc");

                    b.Property<decimal>("DiskFreeBytes")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 20, scale: 0)))
                        .HasColumnName("diskfreebytes");

                    b.Property<decimal>("DiskUsedBytes")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 20, scale: 0)))
                        .HasColumnName("diskusedbytes");

                    b.Property<bool>("IsStatusOk")
                        .HasColumnName("isstatusok");

                    b.Property<DateTime>("LastBackupEndDateTimeUtc")
                        .HasColumnName("lastbackupenddatetimeutc");

                    b.Property<decimal>("LastBackupSizeBytes")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 20, scale: 0)))
                        .HasColumnName("lastbackupsizebytes");

                    b.Property<DateTime>("LastBackupStartDateTimeUtc")
                        .HasColumnName("lastbackupstartdatetimeutc");

                    b.Property<DateTime>("OldestBackupEndDateTimeUtc")
                        .HasColumnName("oldestbackupenddatetimeutc");

                    b.Property<int>("ServerId")
                        .HasColumnName("serverid");

                    b.HasKey("Id")
                        .HasName("pk_backup");

                    b.HasIndex("ServerId")
                        .HasName("ix_backup_serverid");

                    b.ToTable("backup");
                });

            modelBuilder.Entity("Tedu.Server.Status.DataAccess.Entities.Probe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<DateTime>("CheckedDateTimeUtc")
                        .HasColumnName("checkeddatetimeutc");

                    b.Property<int>("Result")
                        .HasColumnName("result");

                    b.Property<int>("ServerId")
                        .HasColumnName("serverid");

                    b.Property<int>("Type")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_probe");

                    b.HasIndex("ServerId")
                        .HasName("ix_probe_serverid");

                    b.ToTable("probe");
                });

            modelBuilder.Entity("Tedu.Server.Status.DataAccess.Entities.Server", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnName("host");

                    b.HasKey("Id")
                        .HasName("pk_server");

                    b.HasIndex("Host")
                        .IsUnique()
                        .HasName("ix_server_host");

                    b.ToTable("server");
                });

            modelBuilder.Entity("Tedu.Server.Status.DataAccess.Entities.Backup", b =>
                {
                    b.HasOne("Tedu.Server.Status.DataAccess.Entities.Server")
                        .WithMany("Backups")
                        .HasForeignKey("ServerId")
                        .HasConstraintName("fk_backup_server_serverid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tedu.Server.Status.DataAccess.Entities.Probe", b =>
                {
                    b.HasOne("Tedu.Server.Status.DataAccess.Entities.Server", "Server")
                        .WithMany("Probes")
                        .HasForeignKey("ServerId")
                        .HasConstraintName("fk_probe_server_serverid")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
