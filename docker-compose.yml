version: '3.7'

x-logging:
  &default-logging
  options:
    max-size: '10m'
    max-file: '10'
  driver: json-file

services:
  tedu-status-database:
    image: postgres:12.1-alpine
    environment:
      - POSTGRES_PASSWORD=!UODlkja*7
    volumes:
      - postgres-data:/var/lib/postgresql/data
    container_name: tedu-status-db
    logging: *default-logging

  tedu_status_db_migration:
    image: postgres:12.1-alpine
    depends_on:
      - tedu-status-database
    environment:
      - HOST=tedu-status-database
      - DATABASE=postgres
      - USER=postgres
      - PASSWORD=!UODlkja*7
    volumes:
      - "./Tedu.Server.Status.DataAccess.Migrations/migrate.sh:/etc/migration/migrate.sh"
      - "./Tedu.Server.Status.DataAccess.Migrations/Sql/migrate.sql:/etc/migration/migrate.sql"
    container_name: tedu-status-db-migration
    entrypoint: /bin/sh -c "sh /etc/migration/migrate.sh"
    logging: *default-logging
      
  tedu_status_server:
    image: tedu-status-server
    depends_on:
      - tedu-status-database
    build:
      context: .
      dockerfile: Tedu.Server.Status.Web/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - Host=${NGINX_SERVER_NAME}
      - DatabaseSettings__DatabaseServer=tedu-status-database
      - HostSettings__SettingsAccessToken=${SETTINGS_ACCESS_TOKEN}
    container_name: tedu-status-server
    logging: *default-logging

  status_reverse_proxy:
    image: nginx:1.17.6
    ports:
      - "80:80"
      - "443:443"
    links:
      - tedu_status_server
    environment:
      - NGINX_SERVER_NAME
    volumes:
      - "./nginx.template:/etc/nginx/conf.d/nginx.template"
      - "/var/www/certbot:/var/www/certbot"
      - "../ssl:/ssl"
    container_name: status-reverse-proxy
    # run nginx with configuration generated using environment variable(s)
    command: /bin/bash -c "envsubst '$NGINX_SERVER_NAME' < /etc/nginx/conf.d/nginx.template > /etc/nginx/nginx.conf; while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g 'daemon off;'"
    logging: *default-logging

  certbot:
    image: certbot/certbot:v1.0.0
    restart: unless-stopped
    volumes:
      - "/etc/letsencrypt:/etc/letsencrypt"
      - "/var/www/certbot:/var/www/certbot"
      - "../ssl:/ssl"
    container_name: certbot
    entrypoint: /bin/sh -c "trap exit TERM; while :; do certbot renew --deploy-hook /ssl/certbot-deploy-hook.sh; sleep 12h & wait $${!}; done;"
    logging: *default-logging

volumes:
  postgres-data: